@page "/academic-record/teacher/{userId:guid}/edit"
@using lms.Domain
@using lms.UseCases.Manager.AcademicRecord
@using lms.UseCases.Teacher
@inject NavigationManager Navigation
@inject ITeacherService TeacherService
@inject IUpdateTeacher UpdateTeacher

<PageTitle>Editar Professor</PageTitle>

<h1>Editar Professor</h1>

@if (successMessageVisible)
{
    <div class="success-message">
        Professor atualizado com sucesso!
    </div>
}

<div class="form-container">
    <EditForm Model="@teacher" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Nome:</label>
            <InputText id="name" @bind-Value="teacher.User.FullName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="cpf">CPF:</label>
            <InputText id="cpf" @bind-Value="teacher.User.Identity" class="form-control" />
        </div>

        <div class="form-group">
            <label for="birthdate">Data de Nascimento:</label>
            <InputDate id="birthdate" @bind-Value="teacher.User.BirthDate" class="form-control" />
        </div>

       @*  <div class="form-group">
            <label for="address">Endereço:</label>
            <InputText id="address" @bind-Value="teacher.User.Address" class="form-control" />
        </div> *@

        <div class="form-group">
            <label for="phone">Telefone:</label>
            <InputText id="phone" @bind-Value="teacher.User.Phone" class="form-control" />
        </div>

        <div class="form-group">
            <label for="email">E-mail:</label>
            <InputText id="email" @bind-Value="teacher.User.Email" class="form-control" />
        </div>

        <button type="submit" class="submit-btn">Salvar</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    private TeacherModel teacher = new TeacherModel();
    private bool successMessageVisible = false;

    protected override async Task OnInitializedAsync()
    {
        teacher = await TeacherService.GetByIdAsync(UserId);
    }

    private async Task HandleValidSubmit()
    {
        await UpdateTeacher.Execute(teacher);

        successMessageVisible = true;

        await Task.Delay(1000);
        Navigation.NavigateTo("/academic-record");
    }
}
